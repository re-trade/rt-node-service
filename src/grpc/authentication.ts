// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: authentication.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'authentication';

export enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0,
  ACCESS_TOKEN = 1,
  REFRESH_TOKEN = 2,
  TWO_FA_TOKEN = 3,
  UNRECOGNIZED = -1,
}

export function tokenTypeFromJSON(object: any): TokenType {
  switch (object) {
    case 0:
    case 'TOKEN_TYPE_UNSPECIFIED':
      return TokenType.TOKEN_TYPE_UNSPECIFIED;
    case 1:
    case 'ACCESS_TOKEN':
      return TokenType.ACCESS_TOKEN;
    case 2:
    case 'REFRESH_TOKEN':
      return TokenType.REFRESH_TOKEN;
    case 3:
    case 'TWO_FA_TOKEN':
      return TokenType.TWO_FA_TOKEN;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return TokenType.UNRECOGNIZED;
  }
}

export function tokenTypeToJSON(object: TokenType): string {
  switch (object) {
    case TokenType.TOKEN_TYPE_UNSPECIFIED:
      return 'TOKEN_TYPE_UNSPECIFIED';
    case TokenType.ACCESS_TOKEN:
      return 'ACCESS_TOKEN';
    case TokenType.REFRESH_TOKEN:
      return 'REFRESH_TOKEN';
    case TokenType.TWO_FA_TOKEN:
      return 'TWO_FA_TOKEN';
    case TokenType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}

export interface TokenRequest {
  token?: string | undefined;
  type?: TokenType | undefined;
}

export interface UserTokenInfo {
  accountId?: string | undefined;
  roles?: string[] | undefined;
  username?: string | undefined;
  isActive?: boolean | undefined;
  isVerified?: boolean | undefined;
  type?: TokenType | undefined;
}

export interface CustomerDetailInfo {
  username?: string | undefined;
  email?: string | undefined;
  roles?: string[] | undefined;
  isActive?: boolean | undefined;
  isVerified?: boolean | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  accountId?: string | undefined;
  customerId?: string | undefined;
  avatarUrl?: string | undefined;
}

export interface SellerDetailInfo {
  username?: string | undefined;
  email?: string | undefined;
  roles?: string[] | undefined;
  isActive?: boolean | undefined;
  isVerified?: boolean | undefined;
  sellerName?: string | undefined;
  avatarUrl?: string | undefined;
  accountId?: string | undefined;
  sellerId?: string | undefined;
}

export interface VerifyTokenResponse {
  isValid?: boolean | undefined;
  userInfo?: UserTokenInfo | undefined;
  errorMessages?: string[] | undefined;
}

export interface GetCustomerProfileResponse {
  isValid?: boolean | undefined;
  userInfo?: CustomerDetailInfo | undefined;
  errorMessages?: string[] | undefined;
}

export interface GetSellerProfileResponse {
  isValid?: boolean | undefined;
  userInfo?: SellerDetailInfo | undefined;
  errorMessages?: string[] | undefined;
}

function createBaseTokenRequest(): TokenRequest {
  return { token: '', type: 0 };
}

export const TokenRequest: MessageFns<TokenRequest> = {
  encode(message: TokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined && message.token !== '') {
      writer.uint32(10).string(message.token);
    }
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : '',
      type: isSet(object.type) ? tokenTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: TokenRequest): unknown {
    const obj: any = {};
    if (message.token !== undefined && message.token !== '') {
      obj.token = message.token;
    }
    if (message.type !== undefined && message.type !== 0) {
      obj.type = tokenTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TokenRequest>, I>>(base?: I): TokenRequest {
    return TokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TokenRequest>, I>>(object: I): TokenRequest {
    const message = createBaseTokenRequest();
    message.token = object.token ?? '';
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseUserTokenInfo(): UserTokenInfo {
  return { accountId: '', roles: [], username: '', isActive: false, isVerified: false, type: 0 };
}

export const UserTokenInfo: MessageFns<UserTokenInfo> = {
  encode(message: UserTokenInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== undefined && message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.roles !== undefined && message.roles.length !== 0) {
      for (const v of message.roles) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.username !== undefined && message.username !== '') {
      writer.uint32(26).string(message.username);
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      writer.uint32(40).bool(message.isVerified);
    }
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserTokenInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserTokenInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.roles!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserTokenInfo {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : '',
      roles: globalThis.Array.isArray(object?.roles)
        ? object.roles.map((e: any) => globalThis.String(e))
        : [],
      username: isSet(object.username) ? globalThis.String(object.username) : '',
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      type: isSet(object.type) ? tokenTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: UserTokenInfo): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.username !== undefined && message.username !== '') {
      obj.username = message.username;
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.type !== undefined && message.type !== 0) {
      obj.type = tokenTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserTokenInfo>, I>>(base?: I): UserTokenInfo {
    return UserTokenInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserTokenInfo>, I>>(object: I): UserTokenInfo {
    const message = createBaseUserTokenInfo();
    message.accountId = object.accountId ?? '';
    message.roles = object.roles?.map(e => e) || [];
    message.username = object.username ?? '';
    message.isActive = object.isActive ?? false;
    message.isVerified = object.isVerified ?? false;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseCustomerDetailInfo(): CustomerDetailInfo {
  return {
    username: '',
    email: '',
    roles: [],
    isActive: false,
    isVerified: false,
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    accountId: '',
    customerId: '',
    avatarUrl: '',
  };
}

export const CustomerDetailInfo: MessageFns<CustomerDetailInfo> = {
  encode(message: CustomerDetailInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== undefined && message.username !== '') {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== undefined && message.email !== '') {
      writer.uint32(18).string(message.email);
    }
    if (message.roles !== undefined && message.roles.length !== 0) {
      for (const v of message.roles) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      writer.uint32(40).bool(message.isVerified);
    }
    if (message.firstName !== undefined && message.firstName !== '') {
      writer.uint32(50).string(message.firstName);
    }
    if (message.lastName !== undefined && message.lastName !== '') {
      writer.uint32(58).string(message.lastName);
    }
    if (message.phone !== undefined && message.phone !== '') {
      writer.uint32(66).string(message.phone);
    }
    if (message.address !== undefined && message.address !== '') {
      writer.uint32(74).string(message.address);
    }
    if (message.accountId !== undefined && message.accountId !== '') {
      writer.uint32(82).string(message.accountId);
    }
    if (message.customerId !== undefined && message.customerId !== '') {
      writer.uint32(90).string(message.customerId);
    }
    if (message.avatarUrl !== undefined && message.avatarUrl !== '') {
      writer.uint32(98).string(message.avatarUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerDetailInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerDetailInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.roles!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.customerId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerDetailInfo {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      roles: globalThis.Array.isArray(object?.roles)
        ? object.roles.map((e: any) => globalThis.String(e))
        : [],
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : '',
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : '',
      phone: isSet(object.phone) ? globalThis.String(object.phone) : '',
      address: isSet(object.address) ? globalThis.String(object.address) : '',
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : '',
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : '',
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : '',
    };
  },

  toJSON(message: CustomerDetailInfo): unknown {
    const obj: any = {};
    if (message.username !== undefined && message.username !== '') {
      obj.username = message.username;
    }
    if (message.email !== undefined && message.email !== '') {
      obj.email = message.email;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.firstName !== undefined && message.firstName !== '') {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined && message.lastName !== '') {
      obj.lastName = message.lastName;
    }
    if (message.phone !== undefined && message.phone !== '') {
      obj.phone = message.phone;
    }
    if (message.address !== undefined && message.address !== '') {
      obj.address = message.address;
    }
    if (message.accountId !== undefined && message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.customerId !== undefined && message.customerId !== '') {
      obj.customerId = message.customerId;
    }
    if (message.avatarUrl !== undefined && message.avatarUrl !== '') {
      obj.avatarUrl = message.avatarUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomerDetailInfo>, I>>(base?: I): CustomerDetailInfo {
    return CustomerDetailInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomerDetailInfo>, I>>(object: I): CustomerDetailInfo {
    const message = createBaseCustomerDetailInfo();
    message.username = object.username ?? '';
    message.email = object.email ?? '';
    message.roles = object.roles?.map(e => e) || [];
    message.isActive = object.isActive ?? false;
    message.isVerified = object.isVerified ?? false;
    message.firstName = object.firstName ?? '';
    message.lastName = object.lastName ?? '';
    message.phone = object.phone ?? '';
    message.address = object.address ?? '';
    message.accountId = object.accountId ?? '';
    message.customerId = object.customerId ?? '';
    message.avatarUrl = object.avatarUrl ?? '';
    return message;
  },
};

function createBaseSellerDetailInfo(): SellerDetailInfo {
  return {
    username: '',
    email: '',
    roles: [],
    isActive: false,
    isVerified: false,
    sellerName: '',
    avatarUrl: '',
    accountId: '',
    sellerId: '',
  };
}

export const SellerDetailInfo: MessageFns<SellerDetailInfo> = {
  encode(message: SellerDetailInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== undefined && message.username !== '') {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== undefined && message.email !== '') {
      writer.uint32(18).string(message.email);
    }
    if (message.roles !== undefined && message.roles.length !== 0) {
      for (const v of message.roles) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      writer.uint32(40).bool(message.isVerified);
    }
    if (message.sellerName !== undefined && message.sellerName !== '') {
      writer.uint32(50).string(message.sellerName);
    }
    if (message.avatarUrl !== undefined && message.avatarUrl !== '') {
      writer.uint32(58).string(message.avatarUrl);
    }
    if (message.accountId !== undefined && message.accountId !== '') {
      writer.uint32(66).string(message.accountId);
    }
    if (message.sellerId !== undefined && message.sellerId !== '') {
      writer.uint32(74).string(message.sellerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SellerDetailInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSellerDetailInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.roles!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sellerName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sellerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SellerDetailInfo {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      roles: globalThis.Array.isArray(object?.roles)
        ? object.roles.map((e: any) => globalThis.String(e))
        : [],
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      sellerName: isSet(object.sellerName) ? globalThis.String(object.sellerName) : '',
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : '',
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : '',
      sellerId: isSet(object.sellerId) ? globalThis.String(object.sellerId) : '',
    };
  },

  toJSON(message: SellerDetailInfo): unknown {
    const obj: any = {};
    if (message.username !== undefined && message.username !== '') {
      obj.username = message.username;
    }
    if (message.email !== undefined && message.email !== '') {
      obj.email = message.email;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.isActive !== undefined && message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isVerified !== undefined && message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.sellerName !== undefined && message.sellerName !== '') {
      obj.sellerName = message.sellerName;
    }
    if (message.avatarUrl !== undefined && message.avatarUrl !== '') {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.accountId !== undefined && message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.sellerId !== undefined && message.sellerId !== '') {
      obj.sellerId = message.sellerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SellerDetailInfo>, I>>(base?: I): SellerDetailInfo {
    return SellerDetailInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SellerDetailInfo>, I>>(object: I): SellerDetailInfo {
    const message = createBaseSellerDetailInfo();
    message.username = object.username ?? '';
    message.email = object.email ?? '';
    message.roles = object.roles?.map(e => e) || [];
    message.isActive = object.isActive ?? false;
    message.isVerified = object.isVerified ?? false;
    message.sellerName = object.sellerName ?? '';
    message.avatarUrl = object.avatarUrl ?? '';
    message.accountId = object.accountId ?? '';
    message.sellerId = object.sellerId ?? '';
    return message;
  },
};

function createBaseVerifyTokenResponse(): VerifyTokenResponse {
  return { isValid: false, userInfo: undefined, errorMessages: [] };
}

export const VerifyTokenResponse: MessageFns<VerifyTokenResponse> = {
  encode(message: VerifyTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isValid !== undefined && message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    if (message.userInfo !== undefined) {
      UserTokenInfo.encode(message.userInfo, writer.uint32(18).fork()).join();
    }
    if (message.errorMessages !== undefined && message.errorMessages.length !== 0) {
      for (const v of message.errorMessages) {
        writer.uint32(26).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userInfo = UserTokenInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.errorMessages!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyTokenResponse {
    return {
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      userInfo: isSet(object.userInfo) ? UserTokenInfo.fromJSON(object.userInfo) : undefined,
      errorMessages: globalThis.Array.isArray(object?.errorMessages)
        ? object.errorMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: VerifyTokenResponse): unknown {
    const obj: any = {};
    if (message.isValid !== undefined && message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.userInfo !== undefined) {
      obj.userInfo = UserTokenInfo.toJSON(message.userInfo);
    }
    if (message.errorMessages?.length) {
      obj.errorMessages = message.errorMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyTokenResponse>, I>>(base?: I): VerifyTokenResponse {
    return VerifyTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyTokenResponse>, I>>(
    object: I
  ): VerifyTokenResponse {
    const message = createBaseVerifyTokenResponse();
    message.isValid = object.isValid ?? false;
    message.userInfo =
      object.userInfo !== undefined && object.userInfo !== null
        ? UserTokenInfo.fromPartial(object.userInfo)
        : undefined;
    message.errorMessages = object.errorMessages?.map(e => e) || [];
    return message;
  },
};

function createBaseGetCustomerProfileResponse(): GetCustomerProfileResponse {
  return { isValid: false, userInfo: undefined, errorMessages: [] };
}

export const GetCustomerProfileResponse: MessageFns<GetCustomerProfileResponse> = {
  encode(
    message: GetCustomerProfileResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.isValid !== undefined && message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    if (message.userInfo !== undefined) {
      CustomerDetailInfo.encode(message.userInfo, writer.uint32(18).fork()).join();
    }
    if (message.errorMessages !== undefined && message.errorMessages.length !== 0) {
      for (const v of message.errorMessages) {
        writer.uint32(26).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomerProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomerProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userInfo = CustomerDetailInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.errorMessages!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomerProfileResponse {
    return {
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      userInfo: isSet(object.userInfo) ? CustomerDetailInfo.fromJSON(object.userInfo) : undefined,
      errorMessages: globalThis.Array.isArray(object?.errorMessages)
        ? object.errorMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetCustomerProfileResponse): unknown {
    const obj: any = {};
    if (message.isValid !== undefined && message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.userInfo !== undefined) {
      obj.userInfo = CustomerDetailInfo.toJSON(message.userInfo);
    }
    if (message.errorMessages?.length) {
      obj.errorMessages = message.errorMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomerProfileResponse>, I>>(
    base?: I
  ): GetCustomerProfileResponse {
    return GetCustomerProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomerProfileResponse>, I>>(
    object: I
  ): GetCustomerProfileResponse {
    const message = createBaseGetCustomerProfileResponse();
    message.isValid = object.isValid ?? false;
    message.userInfo =
      object.userInfo !== undefined && object.userInfo !== null
        ? CustomerDetailInfo.fromPartial(object.userInfo)
        : undefined;
    message.errorMessages = object.errorMessages?.map(e => e) || [];
    return message;
  },
};

function createBaseGetSellerProfileResponse(): GetSellerProfileResponse {
  return { isValid: false, userInfo: undefined, errorMessages: [] };
}

export const GetSellerProfileResponse: MessageFns<GetSellerProfileResponse> = {
  encode(
    message: GetSellerProfileResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.isValid !== undefined && message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    if (message.userInfo !== undefined) {
      SellerDetailInfo.encode(message.userInfo, writer.uint32(18).fork()).join();
    }
    if (message.errorMessages !== undefined && message.errorMessages.length !== 0) {
      for (const v of message.errorMessages) {
        writer.uint32(26).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSellerProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSellerProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userInfo = SellerDetailInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = reader.string();
          if (el !== undefined) {
            message.errorMessages!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSellerProfileResponse {
    return {
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      userInfo: isSet(object.userInfo) ? SellerDetailInfo.fromJSON(object.userInfo) : undefined,
      errorMessages: globalThis.Array.isArray(object?.errorMessages)
        ? object.errorMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetSellerProfileResponse): unknown {
    const obj: any = {};
    if (message.isValid !== undefined && message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.userInfo !== undefined) {
      obj.userInfo = SellerDetailInfo.toJSON(message.userInfo);
    }
    if (message.errorMessages?.length) {
      obj.errorMessages = message.errorMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSellerProfileResponse>, I>>(
    base?: I
  ): GetSellerProfileResponse {
    return GetSellerProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSellerProfileResponse>, I>>(
    object: I
  ): GetSellerProfileResponse {
    const message = createBaseGetSellerProfileResponse();
    message.isValid = object.isValid ?? false;
    message.userInfo =
      object.userInfo !== undefined && object.userInfo !== null
        ? SellerDetailInfo.fromPartial(object.userInfo)
        : undefined;
    message.errorMessages = object.errorMessages?.map(e => e) || [];
    return message;
  },
};

export type GrpcTokenServiceService = typeof GrpcTokenServiceService;
export const GrpcTokenServiceService = {
  verifyToken: {
    path: '/authentication.GrpcTokenService/VerifyToken',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer =>
      Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: VerifyTokenResponse): Buffer =>
      Buffer.from(VerifyTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): VerifyTokenResponse => VerifyTokenResponse.decode(value),
  },
  getCustomerProfile: {
    path: '/authentication.GrpcTokenService/GetCustomerProfile',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer =>
      Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: GetCustomerProfileResponse): Buffer =>
      Buffer.from(GetCustomerProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetCustomerProfileResponse =>
      GetCustomerProfileResponse.decode(value),
  },
  getSellerProfile: {
    path: '/authentication.GrpcTokenService/GetSellerProfile',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer =>
      Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: GetSellerProfileResponse): Buffer =>
      Buffer.from(GetSellerProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetSellerProfileResponse =>
      GetSellerProfileResponse.decode(value),
  },
} as const;

export interface GrpcTokenServiceServer extends UntypedServiceImplementation {
  verifyToken: handleUnaryCall<TokenRequest, VerifyTokenResponse>;
  getCustomerProfile: handleUnaryCall<TokenRequest, GetCustomerProfileResponse>;
  getSellerProfile: handleUnaryCall<TokenRequest, GetSellerProfileResponse>;
}

export interface GrpcTokenServiceClient extends Client {
  verifyToken(
    request: TokenRequest,
    callback: (error: ServiceError | null, response: VerifyTokenResponse) => void
  ): ClientUnaryCall;
  verifyToken(
    request: TokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifyTokenResponse) => void
  ): ClientUnaryCall;
  verifyToken(
    request: TokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifyTokenResponse) => void
  ): ClientUnaryCall;
  getCustomerProfile(
    request: TokenRequest,
    callback: (error: ServiceError | null, response: GetCustomerProfileResponse) => void
  ): ClientUnaryCall;
  getCustomerProfile(
    request: TokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCustomerProfileResponse) => void
  ): ClientUnaryCall;
  getCustomerProfile(
    request: TokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCustomerProfileResponse) => void
  ): ClientUnaryCall;
  getSellerProfile(
    request: TokenRequest,
    callback: (error: ServiceError | null, response: GetSellerProfileResponse) => void
  ): ClientUnaryCall;
  getSellerProfile(
    request: TokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSellerProfileResponse) => void
  ): ClientUnaryCall;
  getSellerProfile(
    request: TokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSellerProfileResponse) => void
  ): ClientUnaryCall;
}

export const GrpcTokenServiceClient = makeGenericClientConstructor(
  GrpcTokenServiceService,
  'authentication.GrpcTokenService'
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>
  ): GrpcTokenServiceClient;
  service: typeof GrpcTokenServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
