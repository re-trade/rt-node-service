generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SenderType {
  SELLER
  CUSTOMER
}

model Room {
  id         String    @id @default(uuid())
  privated  Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  sellerId   String    @map("seller_id")
  customerId String    @map("customer_id")
  messages      Message[]
  videoSessions VideoSession[]
  @@unique([sellerId, customerId])
  @@map("rooms")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  roomId    String @map("room_id") @default("")
  senderType SenderType @map("sender_type")
  senderId  String   @map("sender_id")
  createdAt DateTime @default(now()) @map("created_at")
  room      Room     @relation(fields: [roomId], references: [id])
  @@map("messages")
}

model VideoSession {
  id           String    @id @default(uuid())
  roomId       String
  startTime    DateTime  @map("start_time")
  endTime      DateTime? @map("end_time")
  participants String[]
  recordingUrl String?   @map("recording_url")
  duration     Int?
  status       String    @default("active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  room         Room      @relation(fields: [roomId], references: [id])
  @@map("video_sessions")
}

model Recording {
  id            String    @id @default(uuid())
  callSessionId String    @map("call_session_id")
  filePath      String    @map("file_path")
  startTime     DateTime  @map("start_time")
  endTime       DateTime? @map("end_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("recordings")
}
